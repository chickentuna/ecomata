{"version":3,"sources":["react/hex.ts","react/utils.ts","react/properties.ts","react/CellTicker.ts","react/World.ts","react/tooltip.tsx","react/emoji.ts","react/WorldDrawer.ts","react/App.tsx","index.tsx"],"names":["HEXAGON_HEIGHT","HEXAGON_WIDTH","Math","sqrt","screenToHex","p","xIdx","round","x","y","floor","oddqDirections","oddqOffsetNeighbor","direction","dir","oddqToCube","hex","z","offsetDistance","a","b","abs","cubeDistance","choice","arr","length","random","currentNeighbours","count","predicate","filter","countAnimals","name","c","animal","ANIMALS","fish","habitat","shark","prey","crab","octopus","bird","bug","CellTicker","cell","neighbours","world","transforms","transform","spawned","Object","entries","forEach","id","mates","onPrey","includes","onEmpty","preyCount","onHabitat","type","predators","map","apply","changes","opts","push","replace","index","copy","key","value","set","max","min","World","width","height","cells","neighbourMap","this","initGrid","getNeighbourIndices","distToCenter","result","d","coord","neigh","get","res","idx","newCells","neighours","getNeighbours","newCell","tick","initTooltip","tooltip","PIXI","background","label","text","size","color","align","textEl","fontSize","fontFamily","fontWeight","fill","anchor","generateText","beginFill","drawRect","endFill","visible","addChild","scale","interactiveChildren","TooltipHandler","container","worldContainer","mouseData","bind","interactive","on","ev","data","refresh","zIndex","pos","getLocalPosition","hexCoords","tooltipBlocks","params","join","tooltipBlock","pivot","offY","HEIGHT","offX","WIDTH","monkey","gorilla","dog","poodle","wolf","fox","raccoon","cat","lion","tiger","leopard","horse","unicorn","zebra","deer","ox","cow","pig","boar","ram","sheep","goat","camel","llama","giraffe","elephant","rhinoceros","hippopotamus","mouse","rat","rabbit","chipmunk","hedgehog","bat","bear","koala","panda","kangaroo","badger","turkey","chicken","rooster","penguin","eagle","duck","swan","owl","peacock","parrot","frog","crocodile","turtle","lizard","snake","dragon","sauropod","whale","dolphin","tuna","blowfish","snail","butterfly","ant","honeybee","cricket","spider","scorpion","mosquito","microbe","lobster","shrimp","squid","PLANTS","bouquet","rosette","rose","hibiscus","sunflower","blossom","tulip","seedling","pine","tree","cactus","herb","mushroom","chestnut","COLOURS","void","ocean","rock","sand","earth","WorldDrawer","hexes","hexaP","HEXAGON_RADIUS","group","ground","subText","position","g","lineStyle","colour","clear","drawPolygon","emoji","plant","drawHex","App","props","app","lastWorldTick","worldDrawer","state","paused","msPerTick","antialias","document","querySelector","appendChild","view","ticker","add","animate","initWorld","initUI","draw","launchTicker","tooltipHandler","init","sortableChildren","stage","setup","hexCoord","setTimeout","deltaMS","console","log","setState","className","onClick","handlePause","handleReset","step","onChange","handleMsChange","target","handleAnimalChange","labels","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7f7e5d0e.chunk.js","sourcesContent":["import { Point } from './utils'\n\nexport const HEXAGON_WIDTH = 20\nexport const HEXAGON_RADIUS = HEXAGON_WIDTH / 2\nexport const HEXAGON_HEIGHT = HEXAGON_RADIUS * Math.sqrt(3)\nexport const HEXAGON_X_SEP = HEXAGON_RADIUS * 3 / 2\n\nexport function screenToHex (p:Point): Point {\n  const xIdx = Math.round(p.x / (HEXAGON_RADIUS * (3 / 2)))\n  const x = xIdx\n  let y\n  if (xIdx % 2) {\n    y = Math.floor(p.y / (HEXAGON_HEIGHT))\n  } else {\n    y = Math.round(p.y / (HEXAGON_HEIGHT))\n  }\n\n  return { x, y }\n}\n\nexport function hexToScreen (p:Point): Point {\n  const x = HEXAGON_RADIUS * 3 / 2 * p.x\n  const y = HEXAGON_HEIGHT * (p.y + 0.5 * (p.x & 1))\n  return { x, y }\n}\n\nconst oddqDirections = [\n  [[+1, 0], [+1, -1], [0, -1],\n    [-1, -1], [-1, 0], [0, +1]],\n  [[+1, +1], [+1, 0], [0, -1],\n    [-1, 0], [-1, +1], [0, +1]]\n]\n\nexport function oddqOffsetNeighbor (x:number, y:number, direction:number) {\n  var parity = x & 1\n  var dir = oddqDirections[parity][direction]\n  return { x: x + dir[0], y: y + dir[1] }\n}\n\ninterface CubePoint {\n  x:number\n  y: number\n  z: number\n}\n\nfunction oddqToCube (hex:Point):CubePoint {\n  var x = hex.x\n  var z = hex.y - (hex.x - (hex.x & 1)) / 2\n  var y = -x - z\n  return { x, y, z }\n}\n\nfunction cubeDistance (a:CubePoint, b:CubePoint) : number {\n  return (Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z)) / 2\n}\n\nexport function offsetDistance (a:Point, b:Point):number {\n  var ac = oddqToCube(a)\n  var bc = oddqToCube(b)\n  return cubeDistance(ac, bc)\n}\n","export interface Point {\n  x:number,\n  y:number\n}\n\nexport function randint (a:number, b:number):number {\n  return Math.floor(a + Math.random() * (b - a))\n}\n\nexport function choice <T> (arr:T[]):T {\n  if (arr.length === 1) {\n    return arr[0]\n  }\n  return arr[randint(0, arr.length)]\n}\n","export const HUMIDITY_SOURCE:string[] = [\n  'ocean'\n]\n","import { Cell, World } from './World'\nimport { choice } from './utils'\nimport { HUMIDITY_SOURCE } from './properties'\n\nconst HUMIDITY_DISTANCE = 4\n\nvar currentNeighbours:Cell[] = []\n\nfunction count (predicate: (c:Cell) => boolean): number {\n  return currentNeighbours.filter(predicate).length\n}\n\nfunction countAnimals (name:string) {\n  return count(c => c.animal === name)\n}\n\nexport function countParam (key:string, name:string) {\n  return count(c => c[key] === name)\n}\n\nexport function surroundedBy (key:string, name:string) {\n  return currentNeighbours.every(c => c[key] === name)\n}\n\ninterface Changes {\n  [key:string]:number|string|null\n}\ninterface TransformOpts {\n  replace?: boolean,\n  set?: boolean\n}\ninterface Transform {\n  changes: Changes,\n  opts?: TransformOpts\n}\ntype TransformCollector = (changes: Changes, opts?: TransformOpts) => void\n\nexport function applyHumidity (cell:Cell, transform: TransformCollector) {\n  if (!HUMIDITY_SOURCE.includes(cell.type)) {\n    const humdityScore = Math.max(...currentNeighbours.map(\n      c => {\n        if (HUMIDITY_SOURCE.includes(c.type)) {\n          return HUMIDITY_DISTANCE\n        }\n        return c.humidity || 0\n      }\n    ))\n    transform({ humidity: Math.max(0, humdityScore - 1) }, { set: true })\n  }\n}\n\nfunction apply (cell:Cell, transform:TransformCollector) {\n  let spawned = false\n  Object.entries(ANIMALS).forEach(([id, animal]) => {\n    const mates = countAnimals(id)\n    const onPrey = animal.prey?.includes(cell.animal)\n    const onEmpty = cell.animal == null\n    const preyCount = animal.prey && count(c => animal.prey.includes(c.animal))\n    const onHabitat = typeof animal.habitat === 'string' ? cell.type === animal.habitat : animal.habitat.includes(cell.type)\n\n    if (mates === 2 && (onPrey || (onEmpty && onHabitat)) && ((preyCount == null) || (preyCount > 0))) {\n      transform({ animal: id })\n      spawned = true\n    }\n  })\n\n  if (!spawned && cell.animal != null) {\n    const animal = ANIMALS[cell.animal]\n    const mates = countAnimals(cell.animal)\n    const preyCount = animal.prey && count(c => animal.prey.includes(c.animal))\n\n    if (preyCount != null && preyCount === 0) {\n      transform({ animal: null })\n    } else if (preyCount == null && mates < 2) {\n      const predators = Object.entries(ANIMALS)\n        .filter(([id, predator]) => predator.prey?.includes(cell.animal))\n        .map(([id, predator]) => id)\n      const predatorCount = count(c => predators.includes(c.animal))\n      if (predatorCount > 0) {\n        transform({ animal: null })\n      } else {\n        const onHabitat = typeof animal.habitat === 'string' ? cell.type === animal.habitat : animal.habitat.includes(cell.type)\n        if (!onHabitat) {\n          transform({ animal: null })\n        }\n      }\n    } else {\n      const onHabitat = typeof animal.habitat === 'string' ? cell.type === animal.habitat : animal.habitat.includes(cell.type)\n      if (!onHabitat) {\n        transform({ animal: null })\n      }\n    }\n  }\n}\n\ninterface Animal {\n  prey?:string[],\n  habitat: string|string[]\n}\n\ninterface Contents {\n  id: string,\n  amount: number\n}\n\ninterface Plant {\n  spawn: (cell:Cell) => boolean,\n  spawnCost: Contents\n}\n\n// TODO: how to despawn plants?\nexport const PLANTS:{[id:string]:Plant} = {\n  tree: {\n    spawn: (cell:Cell) => {\n      return cell.type === 'earth' && cell.fertilizer === 1 && cell.humidity > 0\n    },\n    spawnCost: {\n      id: 'fertilizer',\n      amount: 1\n    }\n  },\n  'palm tree': {\n    spawn: (cell:Cell) => {\n      return cell.type === 'sand' && cell.fertilizer === 1 && cell.humidity > 0\n    },\n    spawnCost: {\n      id: 'fertilizer',\n      amount: 1\n    }\n  }\n}\n\nexport const ANIMALS:{[id:string]:Animal} = {\n  fish: {\n    habitat: 'ocean'\n  },\n  shark: {\n    habitat: 'ocean',\n    prey: ['fish']\n  },\n  crab: {\n    habitat: 'sand'\n  },\n  octopus: {\n    habitat: 'ocean',\n    prey: ['crab']\n  },\n  bird: {\n    habitat: ['rock', 'earth'],\n    prey: ['crab', 'bug']\n  },\n  bug: {\n    habitat: 'earth'\n  }\n\n}\n\nexport class CellTicker {\n  static tick (cell: Cell, neighbours: Cell[], world: World):Cell {\n    currentNeighbours = neighbours\n    var transforms:Transform[] = []\n    const accumulator = (changes:Changes, opts:TransformOpts) => {\n      transforms.push({ changes, opts })\n    }\n    apply(cell, accumulator)\n\n    if (transforms.length > 0) {\n      // pick a transform\n      const transform = choice(transforms)\n\n      if (transform.opts?.replace) {\n        return {\n          ...transform.changes,\n          x: cell.x,\n          y: cell.y,\n          index: cell.index\n        }\n      }\n      const copy = { ...cell }\n      for (const key in transform.changes) {\n        const value = transform.changes[key]\n        if (typeof value === 'number' && !transform.opts?.set) {\n          copy[key] = Math.max(0, Math.min(1, (cell[key] || 0) + value))\n        } else {\n          copy[key] = value\n        }\n      }\n      return copy\n    }\n\n    return cell\n  }\n}\n","import { oddqOffsetNeighbor, offsetDistance } from './hex'\nimport { CellTicker } from './CellTicker'\nimport { Point } from './utils'\n\nexport type Cell = {\n  x:number\n  y:number\n  [key: string]: any\n}\n\nexport class World {\n  width: number\n  height: number\n  cells: Cell[]\n  neighbourMap: {[key:string]:number[]}\n\n  constructor () {\n    this.width = 40\n    this.height = 24\n    this.neighbourMap = {}\n    this.initGrid()\n  }\n\n  initGrid () {\n    this.cells = []\n    let index = 0\n    for (let y = 0; y < this.height; ++y) {\n      for (let x = 0; x < this.width; ++x) {\n        const cell = { type: 'void', x, y, index: index++ }\n        this.cells.push(cell)\n      }\n    }\n\n    for (const cell of this.cells) {\n      this.neighbourMap[cell.index] = this.getNeighbourIndices(cell)\n    }\n  }\n\n  get (x:number, y:number):Cell {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return null\n    }\n    return this.cells[y * this.width + x]\n  }\n\n  setup () {\n    this.initGrid()\n    for (const cell of this.cells) {\n      if ((cell.y === 0 && cell.x === 0) || (cell.y === this.height - 1 && cell.x === this.width - 1)) {\n        continue\n      }\n\n      const distToCenter = offsetDistance({ x: this.width / 2, y: this.height / 2 }, cell)\n      if (distToCenter <= 0) {\n        cell.type = 'rock'\n      } else if (distToCenter <= 2) {\n        cell.type = 'earth'\n      } else if (distToCenter <= 3) {\n        cell.type = 'sand'\n      } else {\n        cell.type = 'ocean'\n      }\n    }\n  }\n\n  getNeighbourIndices (hex:Point): number[] {\n    const result = []\n    for (let d = 0; d < 6; ++d) {\n      const coord = oddqOffsetNeighbor(hex.x, hex.y, d)\n      const neigh = this.get(coord.x, coord.y)\n      if (neigh != null) {\n        result.push(neigh.index)\n      }\n    }\n    return result\n  }\n\n  getNeighbours (cell: Cell):Cell[] {\n    const res = []\n    for (const idx of this.neighbourMap[cell.index]) {\n      const neigh = this.cells[idx]\n      if (neigh.type !== 'void') {\n        res.push(neigh)\n      }\n    }\n    return res\n  }\n\n  tick () {\n    const newCells = []\n    for (const cell of this.cells) {\n      if (cell.type === 'void') {\n        newCells.push(cell)\n        continue\n      }\n      const neighours = this.getNeighbours(cell)\n      const newCell = CellTicker.tick(cell, neighours, this)\n      newCells.push(newCell)\n    }\n    this.cells = newCells\n  }\n}\n","import * as PIXI from 'pixi.js'\nimport { World } from './World'\nimport { screenToHex } from './hex'\nimport { HEIGHT, WIDTH } from './App'\n\nfunction generateText (text:string, size:number, color:number|string, align:string): PIXI.Text {\n  var textEl = new PIXI.Text(text, {\n    fontSize: Math.round(size / 1.2) + 'px',\n    fontFamily: 'Lato',\n    fontWeight: 'bold',\n    fill: color\n  })\n\n  if (align === 'right') {\n    textEl.anchor.x = 1\n  } else if (align === 'center') {\n    textEl.anchor.x = 0.5\n  }\n\n  return textEl\n}\n\nfunction initTooltip (): PIXI.Container {\n  var tooltip = new PIXI.Container()\n  var background = new PIXI.Graphics()\n  var label = generateText('', 36, 0xFFFFFF, 'left')\n\n  this.tooltip = tooltip\n  this.background = background\n  this.label = label\n\n  background.beginFill(0x0, 0.7)\n  background.drawRect(0, 0, 100, 90)\n  background.endFill()\n  background.x = -10\n  background.y = -10\n\n  tooltip.visible = false\n\n  tooltip.addChild(background)\n  tooltip.addChild(label)\n\n  tooltip.scale.set(0.5)\n\n  tooltip.interactiveChildren = false\n  return tooltip\n}\n\nexport class TooltipHandler {\n  container: PIXI.Container\n  worldContainer: PIXI.Container\n  tooltip: PIXI.Container\n  background: PIXI.Graphics\n  label: PIXI.Text\n  world: World\n  mouseData: PIXI.interaction.InteractionData\n\n  constructor (container:PIXI.Container, worldContainer:PIXI.Container, world:World) {\n    this.container = container\n    this.worldContainer = worldContainer\n    this.world = world\n  }\n\n  init () {\n    initTooltip.bind(this)()\n    this.worldContainer.interactive = true\n    this.worldContainer.on('mousemove', (ev:PIXI.interaction.InteractionEvent) => {\n      this.mouseData = ev.data\n      this.refresh()\n    })\n    this.container.addChild(this.tooltip)\n    this.tooltip.zIndex = 100\n  }\n\n  refresh () {\n    const tooltip = this.tooltip\n\n    if (this.mouseData) {\n      var pos = this.mouseData.getLocalPosition(this.worldContainer)\n\n      tooltip.x = pos.x * this.worldContainer.scale.x\n      tooltip.y = pos.y * this.worldContainer.scale.y\n\n      const hexCoords = screenToHex(pos)\n\n      const cell = this.world.get(hexCoords.x, hexCoords.y)\n\n      const tooltipBlocks = []\n\n      if (cell != null) {\n        const params = []\n        for (const key in cell) {\n          if (cell[key] != null) {\n            params.push(`${key}: ${cell[key]}`)\n          }\n        }\n        tooltipBlocks.push(params.join('\\n'))\n      } else if (hexCoords.y >= 0 && hexCoords.x >= 0 && hexCoords.x < this.world.width && hexCoords.y < this.world.height) {\n        const x = hexCoords.x\n        const y = hexCoords.y\n\n        const tooltipBlock = 'x: ' + x + '\\ny: ' + y\n        tooltipBlocks.push(tooltipBlock)\n      }\n\n      tooltip.visible = tooltipBlocks.length > 0\n      if (tooltip.visible) {\n        this.label.text = tooltipBlocks.join('\\n──────────\\n')\n      }\n\n      this.background.width = this.label.width + 20\n      this.background.height = this.label.height + 20\n\n      tooltip.pivot.x = -30\n      tooltip.pivot.y = -50\n\n      const offY = Math.max(0, tooltip.y + 50 + tooltip.height - HEIGHT)\n      tooltip.pivot.y += offY * this.worldContainer.scale.y\n\n      const offX = Math.max(0, tooltip.x + 50 + tooltip.width - WIDTH)\n      tooltip.pivot.x += offX * this.worldContainer.scale.x\n    }\n  }\n}\n","export const ANIMALS:{\n  [index:string]:string\n} = {\n  fish: '🐠',\n  shark: '🦈',\n  monkey: '🐒',\n  gorilla: '🦍',\n  dog: '🐕',\n  poodle: '🐩',\n  wolf: '🐺',\n  fox: '🦊',\n  raccoon: '🦝',\n  cat: '🐈',\n  lion: '🦁',\n  tiger: '🐅',\n  leopard: '🐆',\n  horse: '🐎',\n  unicorn: '🦄',\n  zebra: '🦓',\n  deer: '🦌',\n  ox: '🐂',\n  'water buffalo': '🐃',\n  cow: '🐄',\n  pig: '🐖',\n  boar: '🐗',\n  ram: '🐏',\n  sheep: '🐑',\n  goat: '🐐',\n  camel: '🐪',\n  llama: '🦙',\n  giraffe: '🦒',\n  elephant: '🐘',\n  rhinoceros: '🦏',\n  hippopotamus: '🦛',\n  mouse: '🐁',\n  rat: '🐀',\n  rabbit: '🐇',\n  chipmunk: '🐿',\n  hedgehog: '🦔',\n  bat: '🦇',\n  bear: '🐻',\n  koala: '🐨',\n  panda: '🐼',\n  kangaroo: '🦘',\n  badger: '🦡',\n  turkey: '🦃',\n  chicken: '🐔',\n  rooster: '🐓',\n  'baby chick': '🐤',\n  bird: '🐦',\n  penguin: '🐧',\n  eagle: '🦅',\n  duck: '🦆',\n  swan: '🦢',\n  owl: '🦉',\n  peacock: '🦚',\n  parrot: '🦜',\n  frog: '🐸',\n  crocodile: '🐊',\n  turtle: '🐢',\n  lizard: '🦎',\n  snake: '🐍',\n  dragon: '🐉',\n  sauropod: '🦕',\n  't-rex': '🦖',\n  whale: '🐳',\n  dolphin: '🐬',\n  tuna: '🐟',\n  blowfish: '🐡',\n  octopus: '🐙',\n  'spiral shell': '🐚',\n  snail: '🐌',\n  butterfly: '🦋',\n  bug: '🐛',\n  ant: '🐜',\n  honeybee: '🐝',\n  'lady beetle': '🐞',\n  cricket: '🦗',\n  spider: '🕷',\n  'spider web': '🕸',\n  scorpion: '🦂',\n  mosquito: '🦟',\n  microbe: '🦠',\n  crab: '🦀',\n  lobster: '🦞',\n  shrimp: '🦐',\n  squid: '🦑'\n}\n\nexport const PLANTS:{\n  [index:string]:string\n} = {\n  bouquet: '💐',\n  'cherry blossom': '🌸',\n  'white flower': '💮',\n  rosette: '🏵',\n  rose: '🌹',\n  'wilted flower': '🥀',\n  hibiscus: '🌺',\n  sunflower: '🌻',\n  blossom: '🌼',\n  tulip: '🌷',\n  seedling: '🌱',\n  pine: '🌲',\n  tree: '🌳',\n  'palm tree': '🌴',\n  cactus: '🌵',\n  'sheaf of rice': '🌾',\n  herb: '🌿',\n  'four leaf clover': '🍀',\n  mushroom: '🍄',\n  chestnut: '🌰'\n}","import * as PIXI from 'pixi.js'\nimport { World, Cell } from './World'\nimport { HEXAGON_X_SEP, HEXAGON_RADIUS, HEXAGON_HEIGHT, hexToScreen } from './hex'\nimport { ANIMALS, PLANTS } from './emoji'\n\ninterface Hex {\n  group: PIXI.Container,\n  ground: PIXI.Graphics,\n  text: PIXI.Text,\n  subText: PIXI.Text\n}\n\nconst COLOURS:{\n  [index:string]: number\n} = {\n  void: 0x0,\n  ocean: 0x00295e,\n  rock: 0xDCDCDC,\n  sand: 0xEFDD6F,\n  earth: 0x007f1a\n\n}\n\nexport class WorldDrawer {\n  world: World\n  hexes: Hex[]\n  container: PIXI.Container\n\n  init (world: World) {\n    this.hexes = []\n    this.world = world\n    const container = new PIXI.Container()\n\n    for (const cell of world.cells) {\n      const hexaP = hexToScreen(cell)\n      const hex: Hex = {\n        group: new PIXI.Container(),\n        ground: new PIXI.Graphics(),\n        subText: new PIXI.Text('', {\n          fontSize: 20\n        }),\n        text: new PIXI.Text('', {\n          fontSize: 24\n        })\n      }\n\n      hex.text.scale.set(0.5)\n      hex.text.anchor.set(0.5)\n      hex.subText.scale.set(0.4)\n      hex.subText.anchor.set(0.5, 0)\n      hex.subText.y = -1\n\n      hex.group.position.set(hexaP.x, hexaP.y)\n\n      hex.group.addChild(hex.ground, hex.subText, hex.text)\n      container.addChild(hex.group)\n\n      this.hexes.push(hex)\n    }\n    const g = new PIXI.Graphics()\n    g.lineStyle(2, 0xFF0000, 1, 1)\n    g.drawRect(0, 0, world.width * HEXAGON_X_SEP + HEXAGON_RADIUS / 2, (world.height + 0.5) * HEXAGON_HEIGHT)\n    g.position.set(\n      -HEXAGON_RADIUS, -HEXAGON_HEIGHT / 2\n    )\n    container.addChild(g)\n\n    this.container = container\n  }\n\n  drawHex (cell:Cell) {\n    const colour:number = COLOURS[cell.type]\n    // debugger\n    const hex = this.hexes[cell.index]\n\n    const g = hex.ground\n    g.clear()\n    g.beginFill(colour, 1)\n    // g.lineStyle(1, 0x0, 1, 0)\n    g.drawPolygon([\n      -HEXAGON_RADIUS, 0,\n      -HEXAGON_RADIUS / 2, HEXAGON_HEIGHT / 2,\n      HEXAGON_RADIUS / 2, HEXAGON_HEIGHT / 2,\n      HEXAGON_RADIUS, 0,\n      HEXAGON_RADIUS / 2, -HEXAGON_HEIGHT / 2,\n      -HEXAGON_RADIUS / 2, -HEXAGON_HEIGHT / 2\n    ])\n    g.endFill()\n\n    if (cell.animal) {\n      const emoji = ANIMALS[cell.animal]\n      hex.text.text = emoji\n    } else {\n      hex.text.text = ''\n    }\n\n    if (cell.plant) {\n      const emoji = PLANTS[cell.plant]\n      hex.subText.text = emoji\n    } else {\n      hex.subText.text = ''\n    }\n  }\n\n  draw () {\n    for (const cell of this.world.cells) {\n      if (cell.type !== 'void') {\n        this.drawHex(cell)\n      }\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss'\nimport * as PIXI from 'pixi.js'\nimport { World } from './World'\nimport { TooltipHandler } from './tooltip'\nimport { WorldDrawer } from './WorldDrawer'\nimport { ANIMALS as labels } from './emoji'\nimport { screenToHex } from './hex'\nimport { ANIMALS } from './CellTicker'\n\nconst DEFAULT_MS_PER_TICK = 100\n\ninterface State {\n  paused: boolean\n  msPerTick: number\n  animal: string\n}\ninterface Props {\n\n}\n\nexport const WIDTH = 640\nexport const HEIGHT = 480\n\nclass App extends Component<Props, State> {\n  app: PIXI.Application\n  world: World\n  container: PIXI.Container\n  lastWorldTick: number\n  worldDrawer: WorldDrawer\n  tooltip: TooltipHandler\n  state: State\n\n  constructor (props: Props) {\n    super(props)\n    this.state = {\n      paused: true,\n      msPerTick: DEFAULT_MS_PER_TICK,\n      animal: 'fish'\n    }\n  }\n\n  componentDidMount () {\n    // TODO: do not used application as it eats up cpu even when game is paused\n    this.app = new PIXI.Application({\n      width: WIDTH,\n      height: HEIGHT,\n      antialias: true\n    })\n    document.querySelector('#canvas-zone').appendChild(this.app.view)\n\n    this.app.ticker.add(this.animate.bind(this))\n\n    this.initWorld()\n    this.initUI()\n    this.worldDrawer.draw()\n    this.launchTicker()\n  }\n\n  initUI () {\n    const tooltipHandler = new TooltipHandler(this.container, this.worldDrawer.container, this.world)\n    tooltipHandler.init()\n    this.tooltip = tooltipHandler\n  }\n\n  initWorld () {\n    this.container = new PIXI.Container()\n    this.container.sortableChildren = true\n    this.app.stage.addChild(this.container)\n    this.container.position.set(30, 30)\n\n    this.world = new World()\n    this.world.setup()\n\n    this.worldDrawer = new WorldDrawer()\n    this.worldDrawer.init(this.world)\n    this.container.addChild(this.worldDrawer.container)\n    this.worldDrawer.container.scale.set(1)\n    this.worldDrawer.container.interactive = true\n    this.worldDrawer.container.on('click', (ev) => {\n      const point = ev.data.getLocalPosition(this.worldDrawer.container)\n      const hexCoord = screenToHex(point)\n      const cell = this.world.get(hexCoord.x, hexCoord.y)\n      if (cell !== null && cell.type !== 'void') {\n        cell.animal = this.state.animal\n        this.worldDrawer.draw()\n      }\n    })\n  }\n\n  launchTicker () {\n    setTimeout(() => {\n      if (!this.state.paused) {\n        this.tick()\n      }\n      this.launchTicker()\n    }, this.state.msPerTick)\n  }\n\n  tick () {\n    this.world.tick()\n    this.worldDrawer.draw()\n  }\n\n  animate () {\n    const delta = this.app.ticker.deltaMS\n    if (delta >= 100) {\n      console.log('too slow!')\n    }\n  }\n\n  handlePause () {\n    this.setState({\n      paused: !this.state.paused\n    })\n  }\n\n  handleReset () {\n    this.world.setup()\n    this.worldDrawer.draw()\n    this.setState({\n      paused: true\n    })\n  }\n\n  handleMsChange (value:string) {\n    this.setState({ msPerTick: +value })\n  }\n\n  handleAnimalChange (value:string) {\n    this.setState({ animal: value })\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-header-title'>Ecomata</h1>\n        </header>\n        <div className='App-content'>\n\n          <div id='canvas-zone' />\n          <div id='controls'>\n            <button onClick={() => this.handlePause()}>\n              {this.state.paused ? 'Play' : 'Pause'}\n            </button>\n            <button onClick={() => this.handleReset()}>\n              Reset\n            </button>\n            <label>ms per tick:\n              <input type='number' value={this.state.msPerTick} step='10' onChange={(ev) => this.handleMsChange(ev.target.value)} />\n            </label>\n            <select value={this.state.animal} onChange={ev => this.handleAnimalChange(ev.target.value)}>\n              {/* <option label={`${labels.fish} fish`} value='fish' /> */}\n              {/* <option label={`${labels.shark} shark`} value='shark' /> */}\n              {Object.entries(ANIMALS).map(([id, animal]) => {\n                return (\n                  <option key={id} label={`${labels[id]} ${id}`} value={id} />\n                )\n              })}\n            </select>\n            <button onClick={() => this.tick()}>\n              tick\n            </button>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.scss'\nimport App from './react/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}